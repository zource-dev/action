name: 'CI/CD Pipeline'
description: 'Performs CI/CD tasks for Node.js projects'

inputs:
  node_version:
    description: 'Node.js version to use'
    required: true
  pnpm_version:
    description: 'PNPM version to use'
    required: false
    default: '9'
  github_token:
    description: 'GitHub token for repository checkout'
    required: true
  build:
    description: 'Commands to run build'
    required: false
    default: |
      pnpm run build
  test:
    description: 'Commands to run tests'
    required: false
    default: |
      pnpm run test
  autoupdate:
    description: 'Checks updates (latest,minor,patch) and publish if applied'
    required: false
  branch:
    description: 'Branch to push'
    required: false
    default: master
  username:
    description: 'Github username to commit'
    required: false
  email:
    description: 'User email to commit'
    required: false
  npm_token:
    description: 'Npm token to publish updates'
    required: false
  codecov_token:
    description: 'Codecov token for uploading coverage'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Checkout repository 📥
      uses: actions/checkout@v4
      with:
        token: ${{ inputs.github_token }}

    - name: Setup Node.js 🛠️
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node_version }}
        registry-url: 'https://registry.npmjs.org/'

    - name: Install pnpm 📦
      uses: pnpm/action-setup@v3
      with:
        version: ${{ inputs.pnpm_version }}
        run_install: false

    - name: Environment log  ℹ️
      id: env
      run: |
        node --version
        pnpm --version
      shell: bash

    - name: Install dependencies 🔩
      run: |
        echo "VERSION=$(jq -r .version package.json)" >> $GITHUB_OUTPUT
        pnpm install --frozen-lockfile
      shell: bash

    - name: Check updates 🔍
      id: updates
      if: inputs.autoupdate != ''
      run: |
        if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+-[A-Za-z0-9]+$ ]]; then
          echo "$VERSION is not a release"
          exit 1
        fi
        if [ -z "${{ inputs.username }}" ] || [ -z "${{ inputs.email }}" ] || [ -z "${{ inputs.npm_token }}" ]; then
          echo "Ensure username, email, and npm_token are set for autoupdate."
          exit 1
        fi
        npx npm-check-updates -u --target ${{ inputs.autoupdate }}
        if git status --porcelain | grep -q "package.json"; then
          echo "Updates were applied to package.json."
          pnpm install --no-frozen-lockfile
          echo "PUBLISH=true" >> $GITHUB_OUTPUT
        else
          echo "No updates were applied to package.json."
        fi
      shell: bash

    - name: Run build process 🏗️
      run: |
          ${{ inputs.build }}
      shell: bash

    - name: Run testing 🧪
      if: inputs.test != ''
      run: |
          ${{ inputs.test }}
      shell: bash

    - name: Upload test coverage 📈
      if: inputs.codecov_token != ''
      uses: codecov/codecov-action@v4
      with:
        token: ${{ inputs.codecov_token }}

    - name: Commit 💾
      if: steps.updates.outputs.PUBLISH == 'true'
      run: |
        git config --global user.email "${{ inputs.email }}"
        git config --global user.name "${{ inputs.username }}"
        git add --all
        git commit -am "autoupdate"
        pnpm version patch
        git push
        git push --tags
      shell: bash

    - name: Publish 🚀
      if: steps.updates.outputs.PUBLISH == 'true'
      run: |
        echo "//registry.npmjs.org/:_authToken=${{ inputs.npm_token }}" > .npmrc
        npm publish
        rm .npmrc
      shell: bash
